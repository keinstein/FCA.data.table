% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tricontext.R
\name{tricontext.data.table}
\alias{as.tricontext.data.table}
\alias{tricontext.data.table}
\title{Convert a data.table into a triadic context}
\usage{
tricontext.data.table(x = NULL, ..., objects = NULL, attributes = NULL,
  conditions = NULL, objectname = "object", attributename = "attribute",
  conditionname = "condition", collapse_obj = collapse_objects,
  collapse_attr = collapse_attributes, collapse_cond = collapse_conditions)
}
\arguments{
\item{x}{A valid description of a data.table object.
         It shuold contain at three columns, which are
         considered as objects, attributes and conditions,
         respectively.

         See \link{data.table} for further reference.}

\item{objects}{either NULL or a list of objects. This list
               must be a superset of the objects that are
               actually used in the objects column.

              If NULL, the values from the object column ar used as a guess.}

\item{attributes}{either NULL or a list of attributes.
                  This list must be a superset of the attributes
                  that are contained in the attribute column.

                  If NULL the values from the attibute column are used.}

\item{conditions}{either NULL or al list of conditions. This list must
                  be a superset of the conditions in the condition column.

                  If NULL the values from the condition column are used.}

\item{objectname}{Name of the object column}

\item{attributename}{Name of the attribute column}

\item{conditionname}{Name of the condition column}

\item{collapse_obj}{currently unused
This parameter will be used to avoid scaling of
many-valueed triadic contexts}

\item{collapse_attr}{currently unused
This parameter will be used to avoid scaling of
many-valueed triadic contexts}

\item{collapse_cond}{currently unused
This parameter will be used to avoid scaling of
many-valueed triadic contexts}
}
\value{
a triadic formal context
}
\description{
This function adds the necessary information in order to
convert a data table into a triadic context
}
\examples{
library("data.table")
library("FCA.data.table")

hostelmatrix <- as.logical(c(
#   hostelworld  hestels      hostelbookers
#   c y l s f c  c y l s f c  c y l s f c
    0,0,1,0,0,0, 0,0,1,1,0,0, 0,0,1,1,0,0, # Nuevo Suizo
    0,1,1,1,0,1, 0,1,1,1,0,1, 1,1,1,1,0,1, # Samay
    1,1,1,1,0,1, 1,1,1,1,1,1, 0,1,1,1,1,1, # Oasis Backpacker
    1,1,0,1,0,1, 1,1,1,1,1,1, 1,1,1,1,1,1, # One
    1,1,0,1,0,1, 1,1,1,1,1,1, 1,1,1,1,1,1, # Ole Backpacker
    0,0,1,1,0,1, 1,1,1,1,1,1, 1,1,1,1,0,1  # Garden Backpacker
))

hm1 <- expand.grid(object = c("Nuevo Suizo","Samay","Oasis Backpacker",
                       "One","Ole Backpacker","Garden Backpacker"),
                   condition = c("hostelworld","hostels","hostelbookers"),
                   attribute = c("character","safety","location",
                       "staff","fun","cleanliness"),
                   stringsAsFactors=FALSE)

hostels <- tricontext.data.table(hm1[hostelmatrix,],
                                 objects = unique(hm1[,"object"]),
                                 attributes = unique(hm1[,"attribute"]),
                                 conditions = unique(hm1[,"condition"])
                                 )

he <- extent(hostels,c("Nuevo Suizo",
                       "Samay",
                       "Oasis Backpacker",
                       "Garden Backpacker"))
hm <- modus(hostels,c("hostelbookers"))

}
\keyword{data}

